$fn=128;

headfile="head-hillary.stl";
headoffset=[0.00,2.00,2.00];
headscale=[1.00,1.00,1.00];
headtilt=[0.00,0.00,0.00];

hatoffset=[0.00,0.00,2.00];
hatscale=[1.00,1.00,1.00];
hattilt=[0.00,0.00,0.00];

randomAttitude=false;

part="set"; // [king:One King,queen:One Queen,bishop:One Bishop,knight:One Knight,rook:One Rook,pawn:One Pawn,pawns:Eight Pawns,set:Entire Set,board:Generate Board]

// Size of the board squares. 
//                                                                                         
// Pieces designed based on 50.8mm board size and scaled accordingly
// if another board size is specified.
size=50.8;
print_parts();

//color("Ivory") set();
//translate([(size*9)-20,(size*9)-20,0]) color("DimGrey") rotate([0,0,180]) set();

module print_parts() {
   if (part=="king") {
      king();
   } else if (part=="queen") {
      queen();
   } else if (part=="bishop") {
      bishop();
   } else if (part=="knight") {
      knight();
   } else if (part=="rook") {
      rook();
   } else if (part=="pawn") {
      pawn();
   } else if (part=="pawns") {
      for (x=[0:size:2*size]) {
         translate([x+(size*0.5),size*0.75,0]) pawn();
      }
      for (x=[0*size:size:2*size]) {
         translate([x+(size*0.5),(size*0.75)+size,0]) pawn();
      }
      for (x=[0*size:size:1*size]) {
         translate([x+(size),(size*0.75)+size*2,0]) pawn();
      }
   } else if (part=="set") {
      set();
   }
   if (part=="board") {
      translate([(size*4)-(size/2),(size*8)-(size/2),0]) board();      
   }
//rook();
}

module king_hat() {
   rotate([-10,0,0]) union() {
      translate([-2,-2.5,0]) cube([4,3,18]);
      translate([-5,-2.5,12]) cube([10,3,3]);
      difference() {
         scale([1,1,.8]) sphere(10);
         translate([-12,-12,-14]) cube([24,24,10]);
      }
   }
}

module crown(h=18,notches=6,notchsize=8,notchradius=20) {
   $fn=128;
   difference() {
      cylinder(h=h,r=24,center=true);
      cylinder(h=h+5,r=20,center=true);
      for (a=[0:360/notches:360]) {
         translate([notchradius*cos(a),notchradius*sin(a),h/3]) sphere(notchsize);
      }
   }

   translate([0,0,-15]) difference() {
      sphere(25,center=true);
      sphere(23,center=true);
      translate([-25,-25,-25]) cube([50,50,35]);
   }
}

module kingHat() {
   crown();
   translate([0,0,15]) cube([6,4,20],center=true);
   translate([0,0,17]) cube([16,4,5],center=true);
}

module queenHat() {
   crown(h=20,notches=7,notchradius=22,notchsize=7);
   translate([0,0,13]) sphere(6);
}

module royalty() {
   rotate_extrude(convexity=10,$fn=128) translate([11,0,0]) polygon([[-11,34],[-11,-37],[8,-37/*1:0,0,0,0*/] ,[8,-35.99] ,[8,-34.97],[8,-34/*1:0,0,0,0*/] ,[6.99,-34] ,[5.97,-34],[5,-34/*1:0,0,0,0*/] ,[5.76,-33.27] ,[6.34,-32.45] ,[6.71,-31.48] ,[6.74,-30.45] ,[6.35,-29.43] ,[5.73,-28.63],[5,-28/*1:4,-3,-3,3*/] ,[4.19,-27.25] ,[3.41,-26.6] ,[2.61,-25.9] ,[1.91,-25.17] ,[1.34,-24.32] ,[0.95,-23.27] ,[0.78,-22.24] ,[0.76,-21.17] ,[0.85,-20.1] ,[1,-19.09] ,[1.22,-17.95] ,[1.46,-16.96] ,[1.75,-15.87],[2,-15/*1:-3,-10,-6,4*/] ,[1.14,-14.24] ,[0.52,-13.42] ,[-0.05,-12.43] ,[-0.57,-11.28] ,[-0.93,-10.33] ,[-1.26,-9.31] ,[-1.57,-8.23] ,[-1.85,-7.09] ,[-2.11,-5.91] ,[-2.35,-4.69] ,[-2.57,-3.43] ,[-2.77,-2.16] ,[-2.95,-0.86] ,[-3.11,0.44] ,[-3.25,1.75] ,[-3.38,3.05] ,[-3.49,4.34] ,[-3.59,5.61] ,[-3.67,6.85] ,[-3.74,8.05] ,[-3.8,9.21] ,[-3.85,10.33] ,[-3.89,11.38] ,[-3.94,12.69] ,[-3.97,13.86] ,[-3.98,14.88] ,[-4,15.91] ,[-4,16.93],[-4,17/*1:0,-2,12,10*/] ,[-2.96,17.87] ,[-2.01,18.66] ,[-1.14,19.4] ,[-0.34,20.07] ,[0.6,20.87] ,[1.41,21.58] ,[2.25,22.33] ,[3.02,23.06] ,[3.74,23.85] ,[3.24,24.72] ,[2.17,24.75] ,[1.07,24.81],[0,25/*1:4,-1,1,4*/] ,[0.18,25.99] ,[0.17,27.03] ,[-0.18,28] ,[-0.93,28.7] ,[-1.9,28.99],[-2,29/*1:0,0,0,0*/],[-2,30/*1:0,0,5,2*/] ,[-0.98,30.46] ,[-0.13,31.03] ,[0.1,32.03] ,[-0.76,32.61] ,[-1.71,32.93],[-2,33],[-2,34]]);
}

module subject() {
   rotate_extrude($fn=128) translate([13,0,0]) polygon([[11,-41/*1:-9,-1,0,0*/] ,[11,-42.01] ,[11,-43.03],[11,-44/*1:0,0,0,0*/] ,[9.89,-44] ,[8.73,-44] ,[7.52,-44] ,[6.41,-44] ,[5.2,-44] ,[3.91,-44] ,[2.9,-44] ,[1.86,-44] ,[0.79,-44] ,[-0.28,-44] ,[-1.36,-44] ,[-2.44,-44] ,[-3.5,-44] ,[-4.55,-44] ,[-5.57,-44] ,[-6.88,-44] ,[-8.12,-44] ,[-9.25,-44] ,[-10.27,-44] ,[-11.35,-44] ,[-12.45,-44],[-13,-44/*1:0,0,0,0*/] ,[-13,-42.91] ,[-13,-41.62] ,[-13,-40.35] ,[-13,-38.87] ,[-13,-37.76] ,[-13,-36.57] ,[-13,-35.29] ,[-13,-33.94] ,[-13,-32.52] ,[-13,-31.04] ,[-13,-29.5] ,[-13,-27.91] ,[-13,-26.27] ,[-13,-24.59] ,[-13,-22.88] ,[-13,-21.14] ,[-13,-19.37] ,[-13,-17.59] ,[-13,-15.8] ,[-13,-14] ,[-13,-12.2] ,[-13,-10.41] ,[-13,-8.63] ,[-13,-6.86] ,[-13,-5.12] ,[-13,-3.41] ,[-13,-1.73] ,[-13,-0.09] ,[-13,1.5] ,[-13,3.04] ,[-13,4.52] ,[-13,5.94] ,[-13,7.29] ,[-13,8.57] ,[-13,9.76] ,[-13,10.87] ,[-13,11.88] ,[-13,13.22] ,[-13,14.32] ,[-13,15.38],[-13,16/*1:0,0,0,0*/] ,[-11.94,16] ,[-10.9,16] ,[-9.76,16] ,[-8.65,16] ,[-7.65,16] ,[-6.59,16] ,[-5.49,16] ,[-4.37,16] ,[-3.24,16] ,[-2.1,16] ,[-0.99,16] ,[0.1,16] ,[1.14,16] ,[2.31,16] ,[3.37,16],[4,16/*1:-5,0,1,0*/] ,[3.71,15.02] ,[3,14.25] ,[2.27,13.56] ,[1.51,12.89] ,[0.68,12.22] ,[-0.19,11.56],[-1,11/*1:3,2,0,-1*/] ,[-1.39,9.93] ,[-1.83,8.84] ,[-2.2,7.86] ,[-2.59,6.73] ,[-2.9,5.71] ,[-3.2,4.62] ,[-3.47,3.44] ,[-3.7,2.19] ,[-3.87,0.88] ,[-3.97,-0.15] ,[-4.02,-1.22] ,[-4.03,-2.31] ,[-3.99,-3.43] ,[-3.89,-4.58] ,[-3.74,-5.74] ,[-3.52,-6.93] ,[-3.22,-8.14] ,[-2.86,-9.36] ,[-2.41,-10.6] ,[-1.87,-11.85] ,[-1.25,-13.1] ,[-0.53,-14.36] ,[0.29,-15.63] ,[0.89,-16.47] ,[1.54,-17.32] ,[2.25,-18.16],[3,-19/*1:-13,14,0,0*/] ,[2.46,-19.96] ,[2,-20.91] ,[1.58,-21.95] ,[1.23,-22.95] ,[0.93,-24.04] ,[0.72,-25.2] ,[0.62,-26.39] ,[0.65,-27.4] ,[0.79,-28.4] ,[1.07,-29.39] ,[1.51,-30.35] ,[2.11,-31.26] ,[2.91,-32.12] ,[3.7,-32.76] ,[4.62,-33.35] ,[5.71,-33.88],[6,-34/*1:-10,4,9,-3*/] ,[6.98,-34.37] ,[7.93,-34.85] ,[8.81,-35.56] ,[9.31,-36.5] ,[9.25,-37.54] ,[8.79,-38.54] ,[8.21,-39.43] ,[7.7,-40.32] ,[8.39,-41.09] ,[9.42,-41.12] ,[10.49,-41.05]]);
}

module pawnBody() {
     rotate_extrude($fn=128) translate([13,0,0]) polygon([[10,-41/*1:-9,-1,0,0*/] ,[10,-42.01] ,[10,-43.03],[10,-44/*1:0,0,0,0*/] ,[8.93,-44] ,[7.82,-44] ,[6.66,-44] ,[5.6,-44] ,[4.44,-44] ,[3.2,-44] ,[1.9,-44] ,[0.9,-44] ,[-0.12,-44] ,[-1.16,-44] ,[-2.19,-44] ,[-3.22,-44] ,[-4.24,-44] ,[-5.56,-44] ,[-6.83,-44] ,[-8.03,-44] ,[-9.14,-44] ,[-10.15,-44] ,[-11.23,-44] ,[-12.36,-44],[-13,-44/*1:0,0,0,0*/] ,[-13,-42.86] ,[-13,-41.68] ,[-13,-40.57] ,[-13,-39.27] ,[-13,-37.8] ,[-13,-36.74] ,[-13,-35.62] ,[-13,-34.44] ,[-13,-33.2] ,[-13,-31.92] ,[-13,-30.59] ,[-13,-29.23] ,[-13,-27.83] ,[-13,-26.4] ,[-13,-24.95] ,[-13,-23.48] ,[-13,-21.99] ,[-13,-20.5] ,[-13,-19] ,[-13,-17.5] ,[-13,-16.01] ,[-13,-14.52] ,[-13,-13.05] ,[-13,-11.6] ,[-13,-10.17] ,[-13,-8.77] ,[-13,-7.41] ,[-13,-6.08] ,[-13,-4.8] ,[-13,-3.56] ,[-13,-2.38] ,[-13,-1.26] ,[-13,-0.2] ,[-13,1.27] ,[-13,2.57] ,[-13,3.68] ,[-13,4.86] ,[-13,5.87],[-13,6/*1:0,0,0,0*/] ,[-11.94,6] ,[-10.9,6] ,[-9.76,6] ,[-8.65,6] ,[-7.65,6] ,[-6.59,6] ,[-5.49,6] ,[-4.37,6] ,[-3.24,6] ,[-2.1,6] ,[-0.99,6] ,[0.1,6] ,[1.14,6] ,[2.31,6] ,[3.37,6],[4,6/*1:-5,0,1,0*/] ,[3.79,4.96] ,[3.25,4.04] ,[2.68,3.18] ,[2.09,2.37] ,[1.44,1.52] ,[0.75,0.67] ,[0.02,-0.17] ,[-0.71,-0.97] ,[-1.44,-1.71] ,[-2.25,-2.43],[-3,-3/*1:3,2,-3,-19*/] ,[-3.17,-4.12] ,[-3.32,-5.2] ,[-3.44,-6.25] ,[-3.55,-7.26] ,[-3.68,-8.71] ,[-3.76,-10.09] ,[-3.8,-11.4] ,[-3.8,-12.63] ,[-3.76,-13.8] ,[-3.69,-14.91] ,[-3.58,-15.96] ,[-3.44,-16.95] ,[-3.21,-18.19] ,[-2.92,-19.34] ,[-2.58,-20.41] ,[-2.21,-21.4] ,[-1.79,-22.33] ,[-1.21,-23.41] ,[-0.58,-24.42] ,[0.08,-25.36] ,[0.78,-26.25] ,[1.51,-27.1] ,[2.26,-27.94] ,[3.02,-28.77] ,[3.79,-29.61] ,[4.55,-30.47],[5,-31/*1:-5,6,11,-9*/] ,[5.92,-31.79] ,[6.71,-32.55] ,[7.57,-33.49] ,[8.23,-34.38] ,[8.8,-35.4] ,[9.16,-36.5] ,[9.21,-37.62] ,[8.92,-38.7] ,[8.4,-39.56] ,[7.73,-40.31] ,[7.01,-41.02] ,[8.12,-41.19] ,[9.25,-41.08]]);
}

module rookBody() {
       rotate_extrude($fn=128,convexity=10) translate([8,0,0]) polygon([[-8,6],[-8,-37/*1:0,0,0,0*/] ,[-6.9,-37] ,[-5.85,-37] ,[-4.74,-37] ,[-3.71,-37] ,[-2.6,-37] ,[-1.43,-37] ,[-0.24,-37] ,[0.96,-37] ,[2.14,-37] ,[3.27,-37] ,[4.34,-37] ,[5.5,-37] ,[6.63,-37] ,[7.63,-37],[8,-37/*1:0,0,0,0*/] ,[8,-35.99] ,[8,-34.97],[8,-34/*1:0,0,0,0*/] ,[6.97,-34] ,[5.95,-34] ,[4.95,-34],[4,-34/*1:1,0,1,0*/] ,[4.98,-33.72] ,[5.84,-33.19] ,[6.51,-32.41] ,[6.74,-31.4] ,[6.4,-30.44] ,[5.73,-29.61],[5,-29/*1:4,-3,-4,1*/] ,[4.01,-28.7] ,[3.05,-28.23] ,[2.26,-27.54] ,[1.74,-26.68] ,[1.42,-25.67] ,[1.22,-24.56] ,[1.12,-23.53] ,[1.06,-22.53] ,[1.03,-21.41] ,[1.01,-20.38] ,[1,-19.26] ,[1,-18.05],[1,-17/*1:0,-9,0,1*/] ,[1,-15.94] ,[1,-14.88] ,[1,-13.86] ,[1,-12.76] ,[1,-11.74] ,[1,-10.72] ,[1,-9.61] ,[1,-8.61] ,[1,-7.57],[1,-7/*1:0,-2,0,0*/] ,[1.78,-6.37] ,[2.62,-5.71] ,[3.43,-5.06] ,[4.24,-4.41] ,[5.04,-3.77] ,[5.83,-3.13],[6,-3/*1:0,0,0,0*/] ,[6,-1.98] ,[6,-0.94] ,[6,0.17] ,[6,1.23] ,[6,2.31] ,[6,3.34] ,[6,4.39] ,[6,5.45],[6,6/*1:0,0,0,0*/] ,[4.99,6] ,[3.97,6] ,[2.91,6] ,[1.86,6] ,[0.81,6],[0,6]]);




}

module hat() {
   scale([2.25,2.25,2.5]) difference() {
      intersection() {
         rotate_extrude(angle=180) translate([5,0,0]) polygon([[-5,16],[-5,4],[-7,4],[-6,-1],[-10,-1],[-10,-3],[-6,-3],[-7,-12],[-5,-12/*1:0,0,0,0*/] ,[-5,-13.02] ,[-5,-14.05] ,[-5,-15.09] ,[-5,-16.1],[-5,-17/*1:0,0,0,0*/] ,[-6.04,-17] ,[-7.1,-17] ,[-8.25,-17] ,[-9.35,-17] ,[-10.5,-17] ,[-11.65,-17] ,[-12.75,-17] ,[-13.76,-17] ,[-14.86,-17] ,[-15.89,-17],[-16,-17/*1:0,0,0,0*/] ,[-16.14,-15.97] ,[-16.29,-14.82] ,[-16.43,-13.76] ,[-16.59,-12.57] ,[-16.73,-11.5] ,[-16.88,-10.4] ,[-17.03,-9.28] ,[-17.18,-8.16] ,[-17.32,-7.06] ,[-17.46,-6.02] ,[-17.62,-4.87] ,[-17.75,-3.86] ,[-17.89,-2.8],[-18,-2/*1:0,0,2,11*/] ,[-17.8,-1.02] ,[-17.45,0.25] ,[-17.04,1.48] ,[-16.56,2.67] ,[-16.02,3.82] ,[-15.44,4.92] ,[-14.81,5.98] ,[-14.14,6.99] ,[-13.45,7.95] ,[-12.74,8.87] ,[-12.02,9.73] ,[-11.29,10.55] ,[-10.57,11.31] ,[-9.86,12.02] ,[-9,12.83] ,[-8.18,13.56] ,[-7.29,14.31] ,[-6.38,15.02] ,[-5.51,15.65]]);
         translate([0,-8,0]) scale([1,.75,1]) cylinder(h=50,r=10,center=true);
      }
      translate([0,-6,-10]) scale([1.2,.65,1]) rotate([10,0,0]) cylinder(h=25,d1=10,d2=15);
   }
}

module trishape() {
   intersection() {
      translate([-10,0,0]) sphere(30,center=true);
      translate([10,0,0]) sphere(30,center=true);
      translate([0,10,0]) sphere(30,center=true);
   }   
}

module visor() {
   difference() {
      trishape();
      scale(.9) trishape();
      translate([0,0,-30]) cube([60,60,60],center=true);
      translate([0,-30,0]) cube([60,60,60],center=true);
      translate([-10,0,25]) sphere(20,center=true);
      translate([10,0,25]) sphere(20,center=true);
      translate([0,20,0]) grill();
   }
}

module grill() {
      for (a=[2:4:16]) {
         translate([a,0,((10-(a/1.5)/2))]) rotate([90,0,0]) cube([2,(16-(a/1.5)),30],center=true);
         translate([-a,0,((10-(a/1.5)/2))]) rotate([90,0,0])  cube([2,(16-(a/1.5)),30],center=true);
      }
}

module can() {
   hull() {
      translate([0,0,10]) cylinder(h=20,r=18,center=true);
      translate([0,0,30]) sphere(18);
   }
}

module helmet() {
   translate([0,0,30]) rotate([45,0,0]) visor();

   translate([0,0,5]) difference() {
      can();
      scale(.9) can();
      cylinder(h=20,r=15,center=true);
      hull() {
         translate([0,20,20]) rotate([90,0,0]) cylinder(h=40,r=14,center=true);
         translate([0,10,10]) cube([25,35,35],center=true);
      }
    }

   difference() {
      translate([0,0,2.5]) cylinder(h=5,r1=22,r2=18,center=true);
      cylinder(h=20,r=15,center=true);
   }
}

module swordshape() {
   polygon
   
}

module sword() {
    rotate([0,180,0]) translate([0,0,-72]) scale([.4,1,1.5]) linear_extrude(45,scale=.6) swordshape();
   translate([0,0,5]) rotate([0,180,0]) scale([.3,1]) linear_extrude(5,scale=0) swordshape();
   translate([0,0,70]) cube([30,10,6],center=true);
   translate([0,0,80]) cylinder(h=15,r=4,center=true);
   translate([0,0,90]) cylinder(h=5,r1=5,r2=7,center=true);
}
  

module shield() {
   $fn=128;
   scale([1,1,2]) difference() {
      intersection() {
         translate([4,0,0]) sphere(10);
         translate([-4,0,0]) sphere(10);
         translate([0,0,0]) difference() {
            cylinder(h=10,r=10,center=true);
            cylinder(h=12,r=7,center=true);
         }
      }
      translate([0,10,0]) cube([20,20,20],center=true);
      translate([0,0,12]) cube([20,20,20],center=true);
   }
}

module king() {
   translate([0,0,37]) royalty();
   translate([.5,-3,70])  rotate([-5,0,0]) head(.8);
   translate(hatoffset) rotate(hattilt) scale(hatscale) translate([0,2,93]) rotate([-15,0,0]) scale(.45) scale([1,1.2,1.2]) kingHat();
}

module queen() {
   translate([0,0,35]) scale(.9) royalty();
   translate([-1,-2,64]) rotate([-5,5,-0]) head(.7);
    translate(hatoffset) rotate(hattilt) scale(hatscale) translate([0,2,84]) rotate([-20,0,0]) scale(.35) scale([1,1.1,1]) queenHat();   
}

module bishop() {
   translate([0,0,31]) scale([.7,.7,.7]) subject();
   translate([-1,-2,40]) rotate([-5,0,0]) head(.8);
    translate(hatoffset) rotate(hattilt) scale(hatscale) translate([-1,-5,80]) rotate([-20,0,0]) rotate([0,0,180]) scale([.35,.5,.4]) scale([1.3,2,1]) hat();   

}   
module pawn() {
   translate([0,0,26.4]) scale(.6) pawnBody();
   translate([0,-1,28]) head(.7);
}   


module knight() {
   scale(.7) rotate([0,0,180]) union() {
      translate([0,0,-17]) scale([0.8,0.8,0.7]) {
         translate([0,0,110]) helmet();
         translate([0,4,112]) rotate([0,0,180]) head(1.2);
      }

      translate([0,0,44]) subject();
      translate([0,-15,50]) rotate([0,0,180]) scale([4,4,4]) shield();
      translate([15,8,10]) rotate([-5,0,-45]) scale([.6,.6,.65]) sword();
   }
}


module rook() {
   difference() {
      translate([0,0,37]) rookBody();
      for (a=[0:90:360]) {
         translate([5*cos(a),5*sin(a),41]) rotate([0,0,a]) cube([20,10,10],center=true);
      }
   }
   translate([1,0,33]) scale(.8) head();
   
}

module set() {
   translate([(size*4)-10,(size*8)-10,5]) union() {
      scale(size/50.8) king();
      translate([size,0,0]) scale(size/50.8) queen();
      translate([size*2,0,0]) scale(size/50.8) bishop();
      translate([-size,0,0]) scale(size/50.8) bishop();

      translate([-size*2,0,0]) scale(size/50.8) knight();
      translate([size*3,0,0]) scale(size/50.8) knight();

      translate([size*4,0,0]) scale(size/50.8) rook();
      translate([-size*3,0,0]) scale(size/50.8) rook();

      for (space=[-3:4]) {
         translate([size*space,-size,0]) scale(size/50.8) pawn();
      }
      /*
      translate([0,-size,0]) scale(size/50.8) pawn();
      translate([size,-size,0]) scale(size/50.8) pawn();
      translate([size*2,-size,0]) scale(size/50.8) pawn();
      translate([size*3,-size,0]) scale(size/50.8) pawn();
      translate([size*4,-size,0]) scale(size/50.8) pawn();
      translate([-size,-size,0]) scale(size/50.8) pawn();
      translate([-size*2,-size,0]) scale(size/50.8) pawn();
      translate([-size*3,-size,0]) scale(size/50.8) pawn();
      */
   }
}
$vpd=500;
$vpr=[ 70.00, 0.00, 0.00 ];
//$vpt=[ 140.43,15.20, 2.01 ];
$vpt=[ 223.12, 350.95, 30 ];
translate([(size*4)-(size/2),(size*8)-(size/2),0]) board();
module board() { 
   translate([-10,-10,5]) union() {
      translate([size,-size*3,-5]) linear_extrude(4,scale=.95) square([(size*8.5),(size*8.5)],center=true);
      translate([size/2,size/2,0]) union() {
         for (y=[0:7]) {
            for (x=[0:2:7]) {
               translate([(x*size)-((y%2)*size)-(size*2.5),(y*size)-(size*7.5),-5]) color("White") cube([size,size,5]);
               translate([(x*size)-(abs((y%2)-1)*size)-(size*2.5),(y*size)-(size*7.5),-5]) color("Black") cube([size,size,5]);
            }
         }
      }
   }
}

module head(s=1) {
   if (headfile!="") {
      if (randomAttitude==true) {
         rotate([rands(-10,10,1)[0],rands(-8,8,1)[0],0]) rotate(headtilt) scale(s) translate(headoffset) scale(headscale) import(headfile);         
      } else {
         rotate(headtilt) scale(s) translate(headoffset) scale(headscale) import(headfile);
      }
   } else {
      scale(s) translate([0,0,15]) sphere(15,center=true);
   }
}



